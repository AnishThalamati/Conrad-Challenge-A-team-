//HTML 
<div id="map"></div>

<div class='LivestockInfo'>
  <div><strong>ID:</strong> <span id='ID'></span></div>
  <div><strong>Dosage:</strong> <span id='Dosage'></span></div>
   <div><strong>Last Adminstration Date:</strong> <span id='Date'></span></div>
   <div><strong>Next Adminstration Date:</strong> <span id='NewDate'></span></div>
  <div class = 'button'>
  <button id="Adminster" onclick="ShowDosage()">Adminster Dosage</button>
  <div>
  </div>
  <button id = "Manual Refresh" onclick = "ManualRefresh()">Refresh</button>

//CSS
body { margin: 0; padding: 0; }
  #map { position: absolute; top: 0; bottom: 0; width: 100%; }
  
  .button {
  border: none;
  color: white;
  font-size: 14px;
  border-radius: 12px;
  
  
}

.LivestockInfo {
  position: absolute;
  font-family: sans-serif;
  margin-top: 5px;
  margin-left: 5px;
  padding: 5px;
  width: 30%;
  border: 2px solid black;
  font-size: 14px;
  color: #222;
  background-color: #fff;
  border-radius: 12px;
}


//JS 
 mapboxgl.accessToken = 'pk.eyJ1IjoiYW5pc2h0aGFsYW1hdGkiLCJhIjoiY2tqMGppdWV1MGJybTJ4bGphdmM5c2RtMyJ9.ppWpEl7sE8gjJdgsTd0asw';
    var map = new mapboxgl.Map({
        container: 'map',
        style: 'mapbox://styles/anishthalamati/ckj0x4br310oc1arqbq97vtso',
        zoom: 8,
        center: [-87.6375, 41.9409]
    });
    // Scroll Wheel disable function 
    map.scrollZoom.disable();
    
    // Sidebar display variable 
    var NextDateDisplay = document.getElementById('NewDate')
    var IDDisplay = document.getElementById('ID');
    var DosageDisplay = document.getElementById('Dosage');
    var DateDisplay = document.getElementById('Date')
    
    // Initializes the coordinates for the two cows 
    var xc = -87.637596;
    var yc = 41.940403;
    var xc2 = -87.837596;
    var yc2 = 41.940403;
    
    //Current date updates last admin date 
    var today = new Date();
    // Next admin date calculated to occur 3 months later 
    var today1 = new Date()
		var dd = String(today.getDate()).padStart(2, '0');
		var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
		var yyyy = today.getFullYear();
    var mm1 = String(today.getMonth() + 4).padStart(2, '0');
		today = mm + '/' + dd + '/' + yyyy;
    today1 = mm1 + '/' + dd + '/' + yyyy;
    
    var i = 0; 
    
    //Current 
		var N1 = "No";
		var N2 = "No";
		var N3 = '11/18/20'
		var N4 = '11/16/20'
		var N5 = '2/16/21'
		var N6 = '2/18/21'

    var basedataset =  {
    "type": "FeatureCollection",
    "features": [ 
    {"type": "Feature",
      "properties": {
        "ID": "1",
        "MedicineA": "No",
        "LastRecievedDosage": '11/18/20',
        "NextDosage": N5
        
       
      },
      "geometry": {
        "coordinates": [-87.637596,41.940403],
        "type": "Point"
      }
      },
      {"type": "Feature",
      	"properties": {
        	"ID": "2",
          "MedicineA": "No",
          "LastRecievedDosage": '11/16/20',
          "NextDosage": N5
          
        },
        "geometry": {
         "coordinates": [-87.837596,41.940403],
         "type": "Point" 
         }
      }
      ]
      }
var i = 0; 
var N1 = "No";
var N2 = "No";
var N3 = '11/18/20'
var N4 = '11/16/20'
var N5 = '2/16/21'
var N6 = '2/18/21'

if (N1 == "No"){
var marker = new mapboxgl.Marker({color:"#FF0000"})
.setLngLat([-87.637596,41.940403])
.addTo(map);
}
if (N2 == "No"){
var marker2 = new mapboxgl.Marker({color:"#FF0000"})
.setLngLat([-87.837596,41.940403])
.addTo(map);
}

    

 map.on('load', function () {
 				
        window.setInterval(function () {
        Refresh()
        },
        
        2000);

        map.addSource('drone', { type: 'geojson', data: basedataset});
        map.addLayer({
            'id': 'drone',
            'type': 'symbol',
            'source': 'drone',
            'layout': {
                'icon-image': 'zoo-15'
            }
        });
    });
       
 map.on('click', 'drone', (e) => {


      // Set variables equal to the current feature's magnitude, location, and time
      var features = map.queryRenderedFeatures(e.point, {
    layers: ['drone']
    }); 
    var feature = features[0];
    
      var ID = feature.properties.ID 
      var Dosage = feature.properties.MedicineA 
      var Date = feature.properties.LastRecievedDosage
      var Newdate = feature.properties.NextDosage
      
     

      // Check whether features exist
      if (e.features.length > 0) {
        // Display the magnitude, location, and time in the sidebar
        IDDisplay.textContent = ID;
        DosageDisplay.textContent = Dosage;
        DateDisplay.textContent = Date; 
        NextDateDisplay.textContent = Newdate;
        if (Dosage == "Yes") {
        document.getElementById("Adminster").disabled = true;
        }else {
        document.getElementById("Adminster").disabled = false;
}
        
      
}
});

// 
function ShowDosage() {
 var id = document.getElementById('ID').textContent;
if (id == "1") {
 N1 = "Yes";
 N3 = today;
 N6 = today1;
 
}
if (id == "2") {

 N2 = "Yes";
 N4 = today; 
 N5 = today1

}


 }
 function ManualRefresh() {
 Refresh()
 
 
 }

 
 function Refresh () {
 if (i >=0) {
       marker.remove();
       marker2.remove();
       }
    
                
        
       	 	var coordinates = [  xc , yc  ];
          var coordinates2 = [  xc2 , yc2 ];

    
     
          
     if (i%2 == 0) {
        xc = xc + 0.01 
        yc2 = yc2 + 0.01
        }else {
        xc2 = xc2 + 0.01
        yc = yc + 0.01 
        }
        
        var firstsubset = {
        "ID": "1",
        "MedicineA": N1,
        "LastRecievedDosage": N3,
        "NextDosage": N6
        
      }
        var secondsubset =
        {
        	"ID": "2",
          "MedicineA": N2,
          "LastRecievedDosage": N4,
          "NextDosage": N5
        }
 
        	var newset = {
    "type": "FeatureCollection",
    "features": [ 
    {"type": "Feature",
      "properties": firstsubset,
      "geometry": {
        "coordinates": coordinates,
        "type": "Point"
      }
      },
      {"type": "Feature",
      	"properties": secondsubset,
        "geometry": {
         "coordinates": coordinates2,
         "type": "Point" 
         }
      }
      ]
      }
 

if (N1 == "No"){
marker = new mapboxgl.Marker({color:"#FF0000"})
.setLngLat(coordinates)
.addTo(map);
}

if (N2 == "No") {
marker2 = new mapboxgl.Marker({color:"#FF0000"})
.setLngLat(coordinates2)
.addTo(map);
}

if (today == N5) {
N2 = "No"
}
if (today == N6) {
N2 = "Np"
}



map.getSource('drone').setData(newset);

i = i+1;
map.flyTo({
center: [xc,yc]
});

 
 }



